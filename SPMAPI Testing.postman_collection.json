{
	"info": {
		"_postman_id": "daf9e0ee-f55d-4327-a841-16f94c13391b",
		"name": "SPMAPI Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38167518"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "transactions",
					"item": [
						{
							"name": "update-commission",
							"item": [
								{
									"name": "update Commission Rate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test: HTTP Status Code 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Test: Response contains success message\r",
													"pm.test(\"Response contains success message\", function () {\r",
													"    var responseBody = pm.response.text();\r",
													"    \r",
													"    // Assuming the response contains this exact message (adjust if necessary)\r",
													"    pm.expect(responseBody).to.include(\"Commission rate successfully updated\");\r",
													"});\r",
													"\r",
													"// Test: New commission rate is valid and appears in the response\r",
													"pm.test(\"New commission rate is displayed in response\", function () {\r",
													"    var responseBody = pm.response.text();\r",
													"    \r",
													"    // Check if the response contains the new rate\r",
													"    pm.expect(responseBody).to.include(pm.request.url.query.get('newRate'));\r",
													"});\r",
													"\r",
													"// Optional: Response time test\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/transactions/update-commission?newRate=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transactions",
												"update-commission"
											],
											"query": [
												{
													"key": "newRate",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transactions/update-commission?newRate=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transactions",
														"update-commission"
													],
													"query": [
														{
															"key": "newRate",
															"value": "<number>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "<string>"
										}
									]
								}
							]
						},
						{
							"name": "commission-rate",
							"item": [
								{
									"name": "get Commission Rate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test: HTTP Status Code 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test: Response is in JSON format\r",
													"pm.test(\"Response is in JSON format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"// Optional: Test that the commission rate is greater than 0\r",
													"pm.test(\"Commission rate is greater than 0\", function () {\r",
													"    var commissionRate = parseFloat(pm.response.json());\r",
													"    pm.expect(commissionRate).to.be.above(0);\r",
													"});\r",
													"\r",
													"// Optional: Test that the response time is within a reasonable limit (e.g., 500 ms)\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/transactions/commission-rate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transactions",
												"commission-rate"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transactions/commission-rate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transactions",
														"commission-rate"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "<number>"
										}
									]
								}
							]
						},
						{
							"name": "get All Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: HTTP Status Code 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response is in JSON format\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test: Response contains a list of transactions\r",
											"pm.test(\"Response contains a list of transactions\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Verify the response is an array\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    \r",
											"    if (jsonData.length > 0) {\r",
											"        // Verify that each transaction has expected properties\r",
											"        jsonData.forEach(function(transaction) {\r",
											"            pm.expect(transaction).to.have.property('id');\r",
											"            pm.expect(transaction).to.have.property('commission');\r",
											"            pm.expect(transaction).to.have.property('quantity');\r",
											"            pm.expect(transaction).to.have.property('transactionType');\r",
											"            pm.expect(transaction).to.have.property('price');\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// Optional: Test that the response time is within a reasonable limit (e.g., 500 ms)\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"transactions"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transactions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"portfolio\": {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"id\": \"<long>\",\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"createdAt\": \"<dateTime>\",\n        \"role\": \"<string>\",\n        \"balance\": \"<number>\",\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balance\": \"<number>\"\n          },\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balance\": \"<number>\"\n          }\n        ],\n        \"userBalanceCodes\": [\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balanceCode\": {\n              \"id\": \"<long>\",\n              \"code\": \"<string>\",\n              \"amount\": \"<number>\"\n            },\n            \"used\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balanceCode\": {\n              \"id\": \"<long>\",\n              \"code\": \"<string>\",\n              \"amount\": \"<number>\"\n            },\n            \"used\": \"<boolean>\"\n          }\n        ]\n      },\n      \"portfolioStocks\": [\n        {\n          \"id\": \"<long>\",\n          \"portfolio\": {\n            \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n          },\n          \"stock\": {\n            \"id\": \"<long>\",\n            \"name\": \"<string>\",\n            \"lastPrice\": \"<number>\",\n            \"buyPrice\": \"<number>\",\n            \"sellPrice\": \"<number>\",\n            \"symbol\": \"<string>\",\n            \"portfolioStocks\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              }\n            ],\n            \"transactions\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              }\n            ]\n          },\n          \"quantity\": \"<integer>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"portfolio\": {\n            \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n          },\n          \"stock\": {\n            \"id\": \"<long>\",\n            \"name\": \"<string>\",\n            \"lastPrice\": \"<number>\",\n            \"buyPrice\": \"<number>\",\n            \"sellPrice\": \"<number>\",\n            \"symbol\": \"<string>\",\n            \"portfolioStocks\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              }\n            ],\n            \"transactions\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              }\n            ]\n          },\n          \"quantity\": \"<integer>\"\n        }\n      ]\n    },\n    \"stock\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\",\n      \"lastPrice\": \"<number>\",\n      \"buyPrice\": \"<number>\",\n      \"sellPrice\": \"<number>\",\n      \"symbol\": \"<string>\",\n      \"portfolioStocks\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n        }\n      ],\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ]\n    },\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"transactionType\": \"SELL\",\n    \"quantity\": \"<integer>\",\n    \"price\": \"<number>\",\n    \"commission\": \"<number>\",\n    \"createdAt\": \"<dateTime>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"portfolio\": {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"id\": \"<long>\",\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"createdAt\": \"<dateTime>\",\n        \"role\": \"<string>\",\n        \"balance\": \"<number>\",\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balance\": \"<number>\"\n          },\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balance\": \"<number>\"\n          }\n        ],\n        \"userBalanceCodes\": [\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balanceCode\": {\n              \"id\": \"<long>\",\n              \"code\": \"<string>\",\n              \"amount\": \"<number>\"\n            },\n            \"used\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<long>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            },\n            \"balanceCode\": {\n              \"id\": \"<long>\",\n              \"code\": \"<string>\",\n              \"amount\": \"<number>\"\n            },\n            \"used\": \"<boolean>\"\n          }\n        ]\n      },\n      \"portfolioStocks\": [\n        {\n          \"id\": \"<long>\",\n          \"portfolio\": {\n            \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n          },\n          \"stock\": {\n            \"id\": \"<long>\",\n            \"name\": \"<string>\",\n            \"lastPrice\": \"<number>\",\n            \"buyPrice\": \"<number>\",\n            \"sellPrice\": \"<number>\",\n            \"symbol\": \"<string>\",\n            \"portfolioStocks\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              }\n            ],\n            \"transactions\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              }\n            ]\n          },\n          \"quantity\": \"<integer>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"portfolio\": {\n            \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n          },\n          \"stock\": {\n            \"id\": \"<long>\",\n            \"name\": \"<string>\",\n            \"lastPrice\": \"<number>\",\n            \"buyPrice\": \"<number>\",\n            \"sellPrice\": \"<number>\",\n            \"symbol\": \"<string>\",\n            \"portfolioStocks\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n              }\n            ],\n            \"transactions\": [\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              },\n              {\n                \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n              }\n            ]\n          },\n          \"quantity\": \"<integer>\"\n        }\n      ]\n    },\n    \"stock\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\",\n      \"lastPrice\": \"<number>\",\n      \"buyPrice\": \"<number>\",\n      \"sellPrice\": \"<number>\",\n      \"symbol\": \"<string>\",\n      \"portfolioStocks\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n        }\n      ],\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ]\n    },\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"transactionType\": \"SELL\",\n    \"quantity\": \"<integer>\",\n    \"price\": \"<number>\",\n    \"commission\": \"<number>\",\n    \"createdAt\": \"<dateTime>\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "register",
							"item": [
								{
									"name": "create User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - id, username, password, createdAt, role, balance, and transactions\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('username');\r",
													"    pm.expect(responseData).to.have.property('password');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"serkan\",\n  \"password\": \"stajyeradam\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"register"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"register"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"password\": \"<string>\",\n  \"createdAt\": \"<dateTime>\",\n  \"role\": \"<string>\",\n  \"balance\": \"<number>\",\n  \"transactions\": [\n    {\n      \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n    },\n    {\n      \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n    }\n  ],\n  \"balances\": [\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balance\": \"<number>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balance\": \"<number>\"\n    }\n  ],\n  \"userBalanceCodes\": [\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balanceCode\": {\n        \"id\": \"<long>\",\n        \"code\": \"<string>\",\n        \"amount\": \"<number>\"\n      },\n      \"used\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balanceCode\": {\n        \"id\": \"<long>\",\n        \"code\": \"<string>\",\n        \"amount\": \"<number>\"\n      },\n      \"used\": \"<boolean>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "admin",
							"item": [
								{
									"name": "create",
									"item": [
										{
											"name": "create User With Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {\r",
															"  pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"CreatedAt field should be a valid date format\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  if(responseData.createdAt) {\r",
															"    pm.expect(new Date(responseData.createdAt)).to.not.be.NaN;\r",
															"  }\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Balance is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.balance).to.be.a('number');\r",
															"    pm.expect(responseData.balance).to.be.at.least(0, \"Balance should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"postmandeneme1\",\n  \"password\": \"123456\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/admin/create?role=admin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"admin",
														"create"
													],
													"query": [
														{
															"key": "role",
															"value": "admin",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/admin/create?role=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																"admin",
																"create"
															],
															"query": [
																{
																	"key": "role",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "get User By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Validate user object properties\", function () {\r",
													"    const user = pm.response.json();\r",
													"\r",
													"    // Check that the response has all required properties\r",
													"    pm.expect(user).to.have.property('id').that.is.a('number');  // 'id' should be a number\r",
													"    pm.expect(user).to.have.property('username').that.is.a('string');  // 'username' should be a string\r",
													"    pm.expect(user).to.have.property('password').that.is.a('string');  // 'password' should be a string\r",
													"    pm.expect(user).to.have.property('createdAt').that.is.a('string');  // 'createdAt' should be a string (ISO 8601 date format)\r",
													"    pm.expect(user).to.have.property('role').that.is.a('string');  // 'role' should be a string\r",
													"    pm.expect(user).to.have.property('balance').that.is.a('number');  // 'balance' should be a number\r",
													"\r",
													"    // Additional checks for specific values\r",
													"    pm.expect(user.username).to.equal(\"asar_keser_sap_döner\");  // Check username value\r",
													"    pm.expect(user.role).to.equal(\"user\");  // Check role value\r",
													"    pm.expect(user.balance).to.equal(21200.00);  // Check balance value\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/80",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"80"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"password\": \"<string>\",\n  \"createdAt\": \"<dateTime>\",\n  \"role\": \"<string>\",\n  \"balance\": \"<number>\",\n  \"transactions\": [\n    {\n      \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n    },\n    {\n      \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n    }\n  ],\n  \"balances\": [\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balance\": \"<number>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balance\": \"<number>\"\n    }\n  ],\n  \"userBalanceCodes\": [\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balanceCode\": {\n        \"id\": \"<long>\",\n        \"code\": \"<string>\",\n        \"amount\": \"<number>\"\n      },\n      \"used\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"user\": {\n        \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n      },\n      \"balanceCode\": {\n        \"id\": \"<long>\",\n        \"code\": \"<string>\",\n        \"amount\": \"<number>\"\n      },\n      \"used\": \"<boolean>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "delete One User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response body is null\", function () {\r",
													"    const responseData = xml2Json(pm.response.text());\r",
													"    pm.expect(responseData).to.be.null;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response body follows the expected schema for a null value\", function () {\r",
													"    const responseData = xml2Json(pm.response.text());\r",
													"\r",
													"    pm.expect(responseData).to.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/users/87",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"87"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"  responseData.forEach(user => {\r",
											"    pm.expect(user).to.have.property('id').that.is.a('number'); // ID should be number\r",
											"    pm.expect(user).to.have.property('username').that.is.a('string');\r",
											"    pm.expect(user).to.have.property('password').that.is.a('string');\r",
											"    \r",
											"    // Allow null for createdAt\r",
											"    pm.expect(user).to.have.property('createdAt');\r",
											"    if (user.createdAt !== null) {\r",
											"      pm.expect(user.createdAt).to.be.a('string');\r",
											"    }\r",
											"    \r",
											"    pm.expect(user).to.have.property('role').that.is.a('string');\r",
											"    \r",
											"    // Balance should be a number, not a string\r",
											"    pm.expect(user).to.have.property('balance').that.is.a('number');\r",
											"  });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "stocks",
					"item": [
						{
							"name": "sell",
							"item": [
								{
									"name": "sell Stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the response schema for required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"    pm.expect(responseData.transactionType).to.exist;\r",
													"    pm.expect(responseData.quantity).to.exist;\r",
													"    pm.expect(responseData.price).to.exist;\r",
													"    pm.expect(responseData.commission).to.exist;\r",
													"    pm.expect(responseData.createdAt).to.exist;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"portfolio_id\": \"92\",\n  \"stock_id\": \"10\",\n  \"user_id\": \"80\",\n  \"quantity\": \"1\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/stocks/sell",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"stocks",
												"sell"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"portfolio_id\": \"<long>\",\n  \"stock_id\": \"<long>\",\n  \"user_id\": \"<long>\",\n  \"quantity\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/stocks/sell",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"stocks",
														"sell"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"portfolio\": {\n    \"id\": \"<long>\",\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"portfolioStocks\": [\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      }\n    ]\n  },\n  \"stock\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"lastPrice\": \"<number>\",\n    \"buyPrice\": \"<number>\",\n    \"sellPrice\": \"<number>\",\n    \"symbol\": \"<string>\",\n    \"portfolioStocks\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ]\n  },\n  \"user\": {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  },\n  \"transactionType\": \"BUY\",\n  \"quantity\": \"<integer>\",\n  \"price\": \"<number>\",\n  \"commission\": \"<number>\",\n  \"createdAt\": \"<dateTime>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "buy",
							"item": [
								{
									"name": "buy Stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response schema for id, portfolio, stock, user, transactionType, quantity, price, commission, and createdAt fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('id');\r",
													"    pm.expect(responseData).to.have.property('transactionType');\r",
													"    pm.expect(responseData).to.have.property('quantity');\r",
													"    pm.expect(responseData).to.have.property('price');\r",
													"    pm.expect(responseData).to.have.property('commission');\r",
													"    pm.expect(responseData).to.have.property('createdAt');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"portfolio_id\": \"92\",\n  \"stock_id\": \"10\",\n  \"user_id\": \"80\",\n  \"quantity\": \"3\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/stocks/buy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"stocks",
												"buy"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"portfolio_id\": \"<long>\",\n  \"stock_id\": \"<long>\",\n  \"user_id\": \"<long>\",\n  \"quantity\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/stocks/buy",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"stocks",
														"buy"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"portfolio\": {\n    \"id\": \"<long>\",\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"portfolioStocks\": [\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      }\n    ]\n  },\n  \"stock\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"lastPrice\": \"<number>\",\n    \"buyPrice\": \"<number>\",\n    \"sellPrice\": \"<number>\",\n    \"symbol\": \"<string>\",\n    \"portfolioStocks\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ]\n  },\n  \"user\": {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  },\n  \"transactionType\": \"BUY\",\n  \"quantity\": \"<integer>\",\n  \"price\": \"<number>\",\n  \"commission\": \"<number>\",\n  \"createdAt\": \"<dateTime>\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "portfolios",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create Portfolio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - id and portfolioStocks\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"    pm.expect(responseData.portfolioStocks).to.exist.and.to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the schema of the response\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
													"  pm.expect(responseData.portfolioStocks).to.exist.and.to.be.an('array');\r",
													"  responseData.portfolioStocks.forEach(function (portfolioStock) {\r",
													"    pm.expect(portfolioStock.id).to.exist.and.to.be.a('string');\r",
													"    pm.expect(portfolioStock.portfolio).to.exist.and.to.be.an('object');\r",
													"    pm.expect(portfolioStock.stock).to.exist.and.to.be.an('object');\r",
													"    pm.expect(portfolioStock.quantity).to.exist.and.to.be.a('string');\r",
													"  });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portfolios/create?userId=80",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portfolios",
												"create"
											],
											"query": [
												{
													"key": "userId",
													"value": "80",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portfolios/create?userId=<long>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portfolios",
														"create"
													],
													"query": [
														{
															"key": "userId",
															"value": "<long>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"user\": {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  },\n  \"portfolioStocks\": [\n    {\n      \"id\": \"<long>\",\n      \"portfolio\": {\n        \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n      },\n      \"stock\": {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\",\n        \"lastPrice\": \"<number>\",\n        \"buyPrice\": \"<number>\",\n        \"sellPrice\": \"<number>\",\n        \"symbol\": \"<string>\",\n        \"portfolioStocks\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ]\n      },\n      \"quantity\": \"<integer>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"portfolio\": {\n        \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n      },\n      \"stock\": {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\",\n        \"lastPrice\": \"<number>\",\n        \"buyPrice\": \"<number>\",\n        \"sellPrice\": \"<number>\",\n        \"symbol\": \"<string>\",\n        \"portfolioStocks\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ]\n      },\n      \"quantity\": \"<integer>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "get Portfolio By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - id and portfolioStocks\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('id');\r",
													"    pm.expect(responseData).to.have.property('portfolioStocks');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the stock object within portfolioStocks\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.portfolioStocks).to.be.an('array');\r",
													"    responseData.portfolioStocks.forEach(function (portfolioStock) {\r",
													"        pm.expect(portfolioStock).to.be.an('object');\r",
													"        pm.expect(portfolioStock.stock).to.exist.and.to.be.an('object');\r",
													"        pm.expect(portfolioStock.stock.id).to.exist.and.to.be.a('number');\r",
													"        pm.expect(portfolioStock.stock.name).to.exist.and.to.be.a('string');\r",
													"        pm.expect(portfolioStock.stock.lastPrice).to.exist.and.to.be.a('number');\r",
													"        pm.expect(portfolioStock.stock.buyPrice).to.exist.and.to.be.a('number');\r",
													"        pm.expect(portfolioStock.stock.sellPrice).to.exist.and.to.be.a('number');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Quantity is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.portfolioStocks).to.be.an('array');\r",
													"    responseData.portfolioStocks.forEach(function(item) {\r",
													"        pm.expect(item.quantity).to.be.a('number').above(-1);\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portfolios/93",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portfolios",
												"93"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portfolios/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portfolios",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"user\": {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"balance\": \"<number>\",\n    \"transactions\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balance\": \"<number>\"\n      }\n    ],\n    \"userBalanceCodes\": [\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"user\": {\n          \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n        },\n        \"balanceCode\": {\n          \"id\": \"<long>\",\n          \"code\": \"<string>\",\n          \"amount\": \"<number>\"\n        },\n        \"used\": \"<boolean>\"\n      }\n    ]\n  },\n  \"portfolioStocks\": [\n    {\n      \"id\": \"<long>\",\n      \"portfolio\": {\n        \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n      },\n      \"stock\": {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\",\n        \"lastPrice\": \"<number>\",\n        \"buyPrice\": \"<number>\",\n        \"sellPrice\": \"<number>\",\n        \"symbol\": \"<string>\",\n        \"portfolioStocks\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ]\n      },\n      \"quantity\": \"<integer>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"portfolio\": {\n        \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n      },\n      \"stock\": {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\",\n        \"lastPrice\": \"<number>\",\n        \"buyPrice\": \"<number>\",\n        \"sellPrice\": \"<number>\",\n        \"symbol\": \"<string>\",\n        \"portfolioStocks\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n          }\n        ]\n      },\n      \"quantity\": \"<integer>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "delete Portfolio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 300ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/portfolios/17",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portfolios",
												"17"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/portfolios/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portfolios",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get All Portfolios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - id\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(item => {\r",
											"        pm.expect(item.id).to.exist;\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/portfolios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"portfolios"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portfolios",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portfolios"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"portfolioStocks\": [\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      }\n    ]\n  },\n  {\n    \"id\": \"<long>\",\n    \"user\": {\n      \"id\": \"<long>\",\n      \"username\": \"<string>\",\n      \"password\": \"<string>\",\n      \"createdAt\": \"<dateTime>\",\n      \"role\": \"<string>\",\n      \"balance\": \"<number>\",\n      \"transactions\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n        }\n      ],\n      \"balances\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balance\": \"<number>\"\n        }\n      ],\n      \"userBalanceCodes\": [\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<long>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          },\n          \"balanceCode\": {\n            \"id\": \"<long>\",\n            \"code\": \"<string>\",\n            \"amount\": \"<number>\"\n          },\n          \"used\": \"<boolean>\"\n        }\n      ]\n    },\n    \"portfolioStocks\": [\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"portfolio\": {\n          \"value\": \"<Circular reference to #/components/schemas/Portfolio detected>\"\n        },\n        \"stock\": {\n          \"id\": \"<long>\",\n          \"name\": \"<string>\",\n          \"lastPrice\": \"<number>\",\n          \"buyPrice\": \"<number>\",\n          \"sellPrice\": \"<number>\",\n          \"symbol\": \"<string>\",\n          \"portfolioStocks\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/PortfolioStock detected>\"\n            }\n          ],\n          \"transactions\": [\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            },\n            {\n              \"value\": \"<Circular reference to #/components/schemas/Transaction detected>\"\n            }\n          ]\n        },\n        \"quantity\": \"<integer>\"\n      }\n    ]\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "balance-codes",
					"item": [
						{
							"name": "{balanceCodeId}",
							"item": [
								{
									"name": "assign-balance",
									"item": [
										{
											"name": "{userId}",
											"item": [
												{
													"name": "assign Balance Code To User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 201\", function () {\r",
																	"  pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response time is within an acceptable range\", function () {\r",
																	"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response body is in text/plain format\", function () {\r",
																	"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response includes the message 'Balance code successfully assigned to the user and balance updated'\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"Balance code successfully assigned to the user and balance updated\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/balance-codes/10/assign-balance/80",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"balance-codes",
																"10",
																"assign-balance",
																"80"
															]
														}
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "*/*"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/balance-codes/:balanceCodeId/assign-balance/:userId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"balance-codes",
																		":balanceCodeId",
																		"assign-balance",
																		":userId"
																	],
																	"variable": [
																		{
																			"key": "balanceCodeId"
																		},
																		{
																			"key": "userId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "*/*"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "get All Balance Codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - code and amount\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(item => {\r",
											"        pm.expect(item).to.have.property('code');\r",
											"        pm.expect(item).to.have.property('amount');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Code is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Amount is a number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(item){\r",
											"        pm.expect(item.amount).to.be.a('number');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/balance-codes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"balance-codes"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/balance-codes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"balance-codes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"code\": \"<string>\",\n    \"amount\": \"<number>\"\n  },\n  {\n    \"code\": \"<string>\",\n    \"amount\": \"<number>\"\n  }\n]"
								}
							]
						},
						{
							"name": "create Balance Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - code and amount\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('code');\r",
											"    pm.expect(responseData).to.have.property('amount');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Code is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Amount is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.amount).to.exist.and.to.be.a('number');\r",
											"  pm.expect(responseData.amount).to.be.at.least(0, \"Amount should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"card_300\",\n  \"amount\": \"300\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/balance-codes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"balance-codes"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<string>\",\n  \"amount\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/balance-codes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"balance-codes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				},
				{
					"name": "balances",
					"item": [
						{
							"name": "{userId}",
							"item": [
								{
									"name": "userbalance",
									"item": [
										{
											"name": "get User Balance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"  pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the Content-Type header set to application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/balances/80/userbalance",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"balances",
														"80",
														"userbalance"
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/balances/:userId/userbalance",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"balances",
																":userId",
																"userbalance"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "<number>"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "get Balance By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - balance and userId\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('balance');\r",
													"    pm.expect(responseData).to.have.property('userId');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Balance is a non-negative number\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.balance).to.be.a('number');\r",
													"  pm.expect(responseData.balance).to.be.at.least(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"User ID is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.userId).to.be.a('number').and.to.satisfy(value => value >= 0, \"User ID should be a non-negative integer\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/balances/12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"balances",
												"12"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/balances/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"balances",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"balance\": \"<number>\",\n  \"userId\": \"<long>\"\n}"
										}
									]
								},
								{
									"name": "delete Balance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response body is null or empty\", function () {\r",
													"    const responseData = xml2Json(pm.response.text());\r",
													"    \r",
													"    pm.expect(responseData).to.be.null;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/balances/12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"balances",
												"12"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/balances/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"balances",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get All Balances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - balance and userId\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(data) {\r",
											"        pm.expect(data).to.have.property('balance');\r",
											"        pm.expect(data).to.have.property('userId');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Balance is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item.balance).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"UserId is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(data) {\r",
											"        pm.expect(data.userId).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/balances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"balances"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/balances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"balances"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"balance\": \"<number>\",\n    \"userId\": \"<long>\"\n  },\n  {\n    \"balance\": \"<number>\",\n    \"userId\": \"<long>\"\n  }\n]"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "adminpassword",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}